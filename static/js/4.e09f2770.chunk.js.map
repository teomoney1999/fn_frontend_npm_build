{"version":3,"sources":["pages/Signin/Signin.js","UI/Card/Card.js","UI/Card/Card.module.css","UI/Button/Button.js","UI/Button/Button.module.css","hooks/use-http.js","hooks/use-input.js","UI/Input/Input.js","UI/Input/Input.module.css","helpers/validateHelper.js","UI/Button/ButtonGroup/Buttons.js","UI/Button/ButtonGroup/Buttons.module.css","UI/SelectBox/SelectBox.js","UI/SelectBox/SelectBox.module.css","objects/AdminForm/ModelView/ModelView.module.css","objects/Users/ModelView.js"],"names":["Signin","props","history","useHistory","dispatch","useDispatch","useHttp","post","bind","_create","sendRequest","status","error","createHandler","data","a","console","log","push","onCreate","notify","message","type","delay","notificationAction","onGoBack","goBack","Card","className","classes","card","children","module","exports","Button","button","onClick","handleClick","PortalButton","Fragment","ReactDOM","createPortal","portalBtn","to","redirectTo","style","color","fontSize","document","getElementById","React","memo","httpReducer","state","action","responseData","errorMessage","requestFunction","useReducer","httpState","dispatchHttpState","useCallback","requestData","useInput","validateInputFunc","useState","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","length","trim","hasError","valueChangeHandler","event","target","value","inputBlurHandler","fetchValueHandler","reset","Input","forwardRef","ref","inputRef","useRef","activate","current","focus","useImperativeHandle","control","invalid","htmlFor","id","label","placeholder","onChange","onBlur","disabled","validateHelper","usernameValidate","username","passwordValidate","password","fullnameValidate","fullname","emailValidate","email","includes","phoneValidate","phone","phoneTrimmed","filter","header","nameValidate","name","amountValidate","amount","parseInt","Buttons","btnGroup","btnList","map","btn","isShown","SelectBox","selectRef","valuesList","index","valueField","textField","ModelView","userId","user","isLoading","setIsLoading","usernameIsValid","usernameHasError","usernameChangeHandler","usernameInputBlurHanlder","usernameFetchHandler","passwordIsValid","passwordHasError","passwordChangeHandler","passwordInputBlurHanlder","authFormIsValid","useEffect","gender","fullnameFetchHandler","setGender","emailFetchHandler","phoneFetchHandler","fullnameIsValid","fullnameHasError","fullnameChangeHandler","fullnameInputBlurHanlder","emailIsValid","emailHasError","emailChangeHandler","emailInputBlurHanlder","phoneIsValid","phoneHasError","phoneChangeHandler","phoneInputBlurHanlder","infoFormIsValid","onSubmit","preventDefault","authData","infoData","input","isValid","btnClasses"],"mappings":"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","file":"static/js/4.e09f2770.chunk.js","sourcesContent":["import { useEffect} from 'react';\n// REACT ROUTER\nimport { useHistory } from 'react-router-dom';\n// REDUX\nimport { useDispatch } from 'react-redux';\nimport { notificationAction } from '../../stores/notification-slice';\n// CUSTOM HOOKS\nimport useHttp from '../../hooks/use-http';\nimport { post } from '../../helpers/apiHelper';\n// COMPONENT\nimport ModelView from '../../objects/Users/ModelView';\n\nconst Signin = (props) => {\n    const apiEndpoint = 'user'; \n\n    // HOOKS\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    // USER\n    const { sendRequest: _create, \n        status, error,\n        // data: user \n    } = useHttp(post.bind(null, apiEndpoint));\n    \n    const createHandler = async (data) => {\n        console.log('data', data);\n\n        await _create(data); \n        \n        history.push('/login');\n    }\n\n    const notify = ({message, type, delay}) => {\n        dispatch(notificationAction.notify({\n            message: message, \n            type: type, \n            delay: delay\n        }));\n    }\n\n    const goBackHandler = () => history.goBack();\n\n    return (\n        <ModelView \n            onCreate={ createHandler }\n            error={ error }\n            status={ status }\n \n            // // onUpdateUser={}\n            // // onUpdateUserInfo={}\n            notify={ notify }\n            onGoBack={ goBackHandler }\n        />\n    );\n}\n\n\nexport default Signin;","import React from 'react';\n\nimport classes from './Card.module.css';\n\nconst Card = (props) => {\n    return (\n        <div className={ `${classes.card} ${props.className}` }>\n            { props.children }\n        </div>\n    );\n}\n\n\nexport default Card;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__b7d4V\"};","import React from 'react';\nimport ReactDOM from 'react-dom'; \nimport { Link } from 'react-router-dom';\n\nimport classes from './Button.module.css';\n\nconst Button = (props) => {\n    // console.log('Button RENDERED', props.children);\n    return (\n        <button \n            className={ `${classes.button} ${props.className}` }\n            type={ props.type || \"button\" }\n            onClick={ props.handleClick }>\n                { props.children }\n        </button>\n\n    );\n}\n\nexport const PortalButton = (props) => {\n    return (\n        <React.Fragment>\n            { ReactDOM.createPortal(\n                <Button className={ classes.portalBtn }>\n                     <Link to={ props.redirectTo} >\n                        <i className=\"fa fa-plus\" aria-hidden=\"true\" style={{color: 'white', fontSize: '1.25rem'}}></i>\n                    </Link>\n                </Button>\n            , document.getElementById('backdrop')) \n            }\n        </React.Fragment>\n    );\n}\n\nexport default React.memo(Button);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2KCMa\",\"portalBtn\":\"Button_portalBtn__2jn5N\",\"button-success\":\"Button_button-success__2cfCz\",\"button-danger\":\"Button_button-danger__1fzVN\",\"button-light\":\"Button_button-light__3OUBY\"};","import { useReducer, useCallback } from \"react\";\n\nconst httpReducer = (state, action) => {\n    if (action.type === 'SUCCESS') {\n        return {\n            status: \"completed\", \n            data: action.responseData, \n            error: null, \n        }\n    } else if (action.type === 'FAILED') {\n        return {\n            status: \"completed\", \n            data: null, \n            error: action.errorMessage, \n        }\n    } \n    return {\n        status: 'pending', \n        error: null, \n        data: null\n    }\n}\n\n\nconst useHttp = (requestFunction) => {\n    const [httpState, dispatchHttpState] = useReducer(httpReducer, {\n        status: \"pending\", \n        data: null, \n        error: null,\n    });\n\n    const sendRequest = useCallback(async (requestData) => {\n        try {\n            const responseData = await requestFunction(requestData); \n            dispatchHttpState({ type: 'SUCCESS', responseData: responseData }); \n        } catch (error) {\n            dispatchHttpState({ type: 'FAILED', errorMessage: error.message });\n        }\n    }, []);\n\n    return {\n        ...httpState, \n        sendRequest\n    }\n\n}\n\nexport default useHttp;","import { useState } from 'react';\n\n\nconst useInput = (validateInputFunc) => {\n    const [enteredValue, setEnteredValue] = useState(''); \n    const [isTouched, setIsTouched] = useState(false); \n\n    const valueIsValid = validateInputFunc(enteredValue.length ? enteredValue.trim() : enteredValue);\n    const hasError =  (!valueIsValid && isTouched);\n\n    const valueChangeHandler = (event) => {\n        setEnteredValue(event.target.value); \n    }\n\n    const inputBlurHandler = (event) => {\n        setIsTouched(true); \n    }\n\n    const fetchValueHandler = (value) => {\n        setEnteredValue(value || '');\n    }\n\n    const reset = () => {\n        setEnteredValue(''); \n        setIsTouched(false);\n    }\n\n    return {\n        enteredValue, \n        valueIsValid,\n        hasError, \n        valueChangeHandler, \n        inputBlurHandler,\n        fetchValueHandler,\n        reset\n    }\n}\n\n\nexport default useInput;\n\n","import React, { useRef, useImperativeHandle } from 'react';\n\nimport classes from './Input.module.css';\n\nconst Input = React.forwardRef((props, ref) => {\n    const inputRef = useRef(); \n    \n    // const getInputValue = () => inputRef.current.value; \n\n    const activate = () => inputRef.current.focus(); \n\n    useImperativeHandle(ref, () => {\n        return {\n            focus: activate,\n        }\n    })\n    return (\n        <div className={ `${classes.control} ${ props.className } ${\n            props.hasError ? classes.invalid : ''\n        }` }>\n            <label htmlFor={ props.id }>{ props.label }</label>\n            <input \n                id={ props.id }    \n                type={ props.type }\n                value={ props.value }\n                placeholder={ props.placeholder }\n                onChange={ props.onChange }\n                onBlur={ props.onBlur }\n                ref={ inputRef }\n                disabled={ props.disabled ? true : false}\n            />\n            { props.hasError && <p className={ classes.error }>{ props.errorMessage }</p>}       \n        </div>\n        \n    );\n});\n\n\nexport default Input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"control\":\"Input_control__3fhd9\",\"invalid\":\"Input_invalid__376Oq\",\"error\":\"Input_error__1CLDt\"};","\n\nclass validateHelper {\n    constructor() {\n        return; \n    }\n\n    /** USER */\n    static usernameValidate = (username) => {\n        if (username) {\n            const value = username.trim();\n            return value.length > 5;\n        }\n        return false;\n    }\n    \n    static passwordValidate = (password) => {\n        if (password) {\n            return password.trim().length > 5;\n        }\n        return false;\n    }\n    \n    static fullnameValidate = (fullname) => {\n        if (fullname) {\n            return fullname.trim().length > 8;\n        }\n        return false;\n    }\n\n    static emailValidate = (email) => {\n        if (email) {\n            return email.trim().length > 10 && email.includes('@');\n        }\n        return false;\n    }\n    \n    static phoneValidate = (phone) => {\n        if (phone) {\n            const phoneTrimmed = phone.trim();\n            const phoneHeader = ['032', '033', '034', '035', '036', '037', '038', '039', '092']; \n            const phoneIncludeValidHeader = phoneHeader.filter(header => phoneTrimmed.includes(header)); \n        \n            return phoneIncludeValidHeader.length > 0 && phone.length === 10;\n        }\n\n        return false;\n        \n    }\n\n    /** TRANSACTION */\n    static nameValidate = (name) => {\n        if (name) {\n            return name.trim().length > 0;\n        }\n        return false;\n    }\n\n    static amountValidate = (amount) => {\n        if (amount) {\n            const value = parseInt(amount);\n\n            if (!value) {\n                return false;\n            }\n\n            return value > 1000 && !(value % 1000); \n        }\n        return false;\n    }\n}\n\n\n\nexport default validateHelper;","import React from 'react';\nimport ReactDOM from 'react-dom'; \nimport { Link } from 'react-router-dom';\n\nimport Button from '../Button';\n\nimport classes from './Buttons.module.css';\n\nconst Buttons = (props) => {\n    /**\n     * props: \n     *  - Each button = {} => props = [{}, {}, {}]\n     *  - {\n     *      name, \n     *      onClick, \n     *      type, \n     *      className, \n     *      isShown\n     *  }\n     */\n    return (\n        <div className={ `${classes.btnGroup} ${props.className}` }>\n            { props.btnList.map(btn => \n                (btn.isShown) && \n                    <Button\n                        key={ btn.name }\n                        type={ btn.type || 'button'}\n                        className={ btn.className }\n                        handleClick={ btn.onClick }>\n                            { btn.name }\n                    </Button>\n            ) }\n        </div>\n\n    );\n}\n\n\nexport default React.memo(Buttons);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Buttons_button__2ziV1\",\"portalBtn\":\"Buttons_portalBtn___Z6CZ\"};","import React, { useRef } from 'react';\n\nimport classes from './SelectBox.module.css';\n\nconst SelectBox = (props) => {\n    const selectRef = useRef(); \n\n    const getSelectValue = () => selectRef.current.value();\n\n    return (\n        <div className={ `${classes.control} ${props.className}` }>\n            <label htmlFor={ props.id }>{ props.label }</label>\n            <select\n                id='type'\n                value={ props.value }\n                ref={ selectRef }\n                onChange={ props.onChange } \n                onBlur={ props.onBlur }\n            >\n                { props.valuesList.map((value, index) => (\n                    <option \n                        key={ value.valueField }\n                        value={ value.valueField }>{ value.textField }</option>\n                )) }\n\n            </select>\n        </div>\n\n    );\n}\n\nexport default SelectBox;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"control\":\"SelectBox_control__2UFPm\",\"invalid\":\"SelectBox_invalid__1naWs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"ModelView_card__Y-Q85\",\"card-input\":\"ModelView_card-input__3cZPU\",\"input\":\"ModelView_input__2XBfK\",\"action\":\"ModelView_action__22eXL\"};","import React, { useState, useEffect, Fragment } from 'react';\n\n// UI\nimport Card from '../../UI/Card/Card';\n// import Button from '../../UI/Button/Button';\nimport Input from '../../UI/Input/Input';\nimport SelectBox from '../../UI/SelectBox/SelectBox';\nimport LoadingSpinner from '../../UI/LoadingSpinner/LoadingSpinner';\nimport ButtonGroup from '../../UI/Button/ButtonGroup/Buttons';\n\n// CÚSTOM HOOK\nimport useInput from '../../hooks/use-input';\n\n// HELPER\nimport validateHelper from '../../helpers/validateHelper';\n\n// STYLE\nimport classes from '../AdminForm/ModelView/ModelView.module.css';\nimport btnClasses from '../../UI/Button/Button.module.css';\n\n\n\nconst ModelView = (props) => {\n    const { userId, error, status, user } = props; \n\n    const [isLoading, setIsLoading] = useState(false);\n    /**\n     * AUTH FORM\n     */\n    const { enteredValue: username, \n        valueIsValid: usernameIsValid,\n        hasError: usernameHasError, \n        valueChangeHandler: usernameChangeHandler, \n        inputBlurHandler: usernameInputBlurHanlder,\n        fetchValueHandler: usernameFetchHandler,\n        reset: usernameReset } = useInput(validateHelper.usernameValidate);\n\n    const { enteredValue: password, \n        valueIsValid: passwordIsValid,\n        hasError: passwordHasError, \n        valueChangeHandler: passwordChangeHandler, \n        inputBlurHandler: passwordInputBlurHanlder,\n        fetchValueHandler: passwordFetchHandler,\n        reset: passwordReset } = useInput(validateHelper.passwordValidate);\n    \n    let authFormIsValid = false;\n    if (usernameIsValid && passwordIsValid) {\n        authFormIsValid = true; \n    }\n\n    // FETCH DATA\n    useEffect(() => {   \n        if (!user) return;\n       \n        const { username, fullname, gender, email, phone } = user;\n\n        usernameFetchHandler(username); \n\n        fullnameFetchHandler(fullname); \n        setGender(gender);\n        emailFetchHandler(email);\n        phoneFetchHandler(phone);\n\n        \n    }, [user]);\n\n\n    /**\n     * INFO FORM\n     */\n\n    const { enteredValue: fullname, \n        valueIsValid: fullnameIsValid,\n        hasError: fullnameHasError, \n        valueChangeHandler: fullnameChangeHandler, \n        inputBlurHandler: fullnameInputBlurHanlder,\n        fetchValueHandler: fullnameFetchHandler,\n        reset: fullnameReset } = useInput(validateHelper.fullnameValidate);\n    \n    const { enteredValue: email, \n        valueIsValid: emailIsValid,\n        hasError: emailHasError, \n        valueChangeHandler: emailChangeHandler, \n        inputBlurHandler: emailInputBlurHanlder,\n        fetchValueHandler: emailFetchHandler,\n        reset: emailReset } = useInput(validateHelper.emailValidate);\n\n    const { enteredValue: phone, \n        valueIsValid: phoneIsValid,\n        hasError: phoneHasError, \n        valueChangeHandler: phoneChangeHandler, \n        inputBlurHandler: phoneInputBlurHanlder,\n        fetchValueHandler: phoneFetchHandler,\n        reset: phoneReset } = useInput(validateHelper.phoneValidate);\n\n    const [gender, setGender] = useState('nam');\n\n    let infoFormIsValid = false;\n    if (fullnameIsValid && emailIsValid && phoneIsValid) {\n        infoFormIsValid = true; \n    }\n\n\n    const onGenderChange = (event) => {\n        setGender(event.target.value);\n    }\n\n    const submitHandler = (event) => {\n        event.preventDefault(); \n\n        setIsLoading(true);\n\n        // AUTH FORM\n        const authData = {\n            username: username,\n            password: password, \n        }\n\n        const infoData = {\n            fullname: fullname, \n            email: email, \n            phone: phone, \n            gender: gender,\n            // user_id: userId,\n        }\n\n        if (!authFormIsValid || !infoFormIsValid) {\n            props.notify({message: \"Vui lòng điền đầy đủ thông tin!\", type: 'danger'});\n            setIsLoading(false);\n            return;\n        }\n\n        if (userId) {\n            // PUT\n            // props.onUpdateUser(userId, { ...authData, user_id: userId });  \n            // props.onUpdateUserInfo(userInfoId, { ...infoData, user_id: userId });\n        } else {\n            // POST\n            props.onCreate({ ...authData, ...infoData });\n            // props.onCreateUser(authData);\n            // props.onCreateUserInfo(infoData);\n        }\n\n        /**\n         * Reset input \n         */\n        setIsLoading(false);\n\n \n    };\n\n    // NOTIFY\n    useEffect(() => {\n        if (status !== 'completed') return; \n\n        if (!error) {\n            props.notify({message: \"Lưu thông tin thành công!\", type: \"success\"}); \n        } else {\n            props.notify({message: error, type: 'danger'});\n        }\n    }, [error, status]);\n\n\n    return (\n        <Fragment>              \n            { isLoading && <LoadingSpinner /> }  \n            <form onSubmit={ submitHandler }>\n                <Card className={ `${classes.card} ${props.className}` }>\n                    <h2>Thông tin đăng nhập</h2>\n                    <div className={`${classes.input} `} >\n                        <Input \n                            id='username' \n                            type='text'\n                            // ref={ nameInputRef }\n                            label={ 'Tên đăng nhập' }\n                            isValid={ usernameIsValid }\n                            hasError={ usernameHasError }\n                            value={ username }\n                            onChange={ usernameChangeHandler }\n                            onBlur={ usernameInputBlurHanlder }\n                            className={ classes['card-input'] }\n                            errorMessage={ \"Vui lòng nhập lại tên đăng nhập!\" } \n                            />\n                        <Input \n                            id={ 'passwordLogin' }\n                            type={ 'password' }\n                            label={ 'Mật khẩu' }\n                            isValid={ passwordIsValid }\n                            hasError={ passwordHasError }\n                            value={ password }\n                            onChange={ passwordChangeHandler }\n                            onBlur={ passwordInputBlurHanlder }\n                            // ref={ passwordInputRef }\n                            className={ classes['card-input'] }\n                            errorMessage={ \"Vui lòng nhập lại mật khẩu\" } />\n                    </div>\n             \n            </Card>\n            <Card className={ `${classes.card} ${props.className}` }>\n                <h2>Thông tin người dùng</h2>\n                    <div className={`${classes.input} `} >\n                        <Input \n                            id='fullname' \n                            type='text'\n                            // ref={ nameInputRef }\n                            label={ 'Họ và tên' }\n                            isValid={ fullnameIsValid }\n                            hasError={ fullnameHasError }\n                            value={ fullname }\n                            onChange={ fullnameChangeHandler }\n                            onBlur={ fullnameInputBlurHanlder }\n                            className={ classes['card-input'] }\n                            errorMessage={ \"Vui lòng nhập lại họ và tên!\" } \n                            />\n                        \n                        <SelectBox \n                            id='gender' \n                            label={ 'Giới tính' }\n                            valuesList={ [\n                                {textField: 'Nam', valueField: 'nam'},\n                                {textField: 'Nữ', valueField: 'nu'},\n                                {textField: 'Khác', valueField: 'khac'},\n                            ] }\n                            value={ gender }\n                            onChange={ onGenderChange }\n                            className={ classes['card-input'] }\n                        />\n                    </div>\n\n                    <div className={`${classes.input} `} >\n                        <Input \n                            id={ 'email' }\n                            type={ 'email' }\n                            label={ 'Email' }\n                            isValid={ emailIsValid }\n                            hasError={ emailHasError }\n                            value={ email }\n                            onChange={ emailChangeHandler }\n                            onBlur={ emailInputBlurHanlder }\n                            // ref={ passwordInputRef }\n                            className={ classes['card-input'] }\n                            errorMessage={ \"Vui lòng nhập lại email\" } />\n                        <Input \n                            id='phone' \n                            type='text'\n                            // ref={ nameInputRef }\n                            label={ 'Số điện thoại' }\n                            isValid={ phoneIsValid }\n                            hasError={ phoneHasError }\n                            value={ phone }\n                            onChange={ phoneChangeHandler }\n                            onBlur={ phoneInputBlurHanlder }\n                            className={ classes['card-input'] }\n                            errorMessage={ \"Vui lòng nhập lại số điện thoại!\" } \n                        />\n                    </div>\n\n                    <ButtonGroup \n                        btnList={ [\n                            {\n                                className: btnClasses['button-light'],\n                                onClick: props.onGoBack, \n                                name: 'Quay lại', \n                                isShown: true,\n                            }, \n                            {\n                                className: btnClasses['button-success'], \n                                type: 'submit', \n                                name: 'Lưu thông tin', \n                                isShown: true\n                            },\n                        ] }\n                        className={ classes.action }\n                    />\n                </Card>   \n            </form>\n            \n        </Fragment>\n        \n\n    );\n}\n\n\n// export default TransactionItemView;\nexport default React.memo(ModelView);"],"sourceRoot":""}