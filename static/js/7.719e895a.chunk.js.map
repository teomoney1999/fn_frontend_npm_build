{"version":3,"sources":["objects/Transactions/ModelView.js","pages/Transactions/Transaction.js","UI/Card/Card.js","UI/Card/Card.module.css","hooks/use-http.js","hooks/use-input.js","UI/Input/Input.js","UI/Input/Input.module.css","helpers/validateHelper.js","UI/Button/ButtonGroup/Buttons.js","UI/Button/ButtonGroup/Buttons.module.css","UI/SelectBox/SelectBox.js","UI/SelectBox/SelectBox.module.css","objects/AdminForm/ModelView/ModelView.module.css"],"names":["ModelView","props","useDispatch","userId","useSelector","state","auth","useState","transactionId","setTransactionId","setDate","type","setType","isDelete","setIsDelete","useInput","validateHelper","nameValidate","name","enteredValue","nameIsValid","valueIsValid","nameHasError","hasError","nameChangeHandler","valueChangeHandler","nameInputBlurHanlder","inputBlurHandler","nameFetchHandler","fetchValueHandler","nameReset","reset","amountValidate","amount","amountIsValid","amountHasError","amountChangeHandler","amountInputBlurHanlder","amountFetchHandler","amountReset","description","descriptionIsValid","descriptionChangeHandler","descriptionInputBlurHanlder","descriptionFetchHandler","descriptionReset","formIsValid","transaction","useEffect","idProp","id","nameProp","amountProp","typeProp","dateProp","date","descriptionProp","formatingHelper","getCurrentTimestamp","error","status","notify","message","nameInputRef","useRef","amountInputRef","onChangeType","useCallback","event","target","value","Card","className","classes","card","onSubmit","preventDefault","data","transaction_type","parseInt","user_id","onDeleteTransaction","onUpdateTransaction","onCreateTransaction","input","Input","ref","label","isValid","onChange","onBlur","errorMessage","SelectBox","valuesList","textField","valueField","btnList","btnClasses","onClick","onGoBack","isShown","action","React","memo","Transaction","apiEndpoint","params","useParams","history","useHistory","dispatch","balance","useHttp","post","bind","_create","sendRequest","postError","postStatus","createHandler","a","balanceAction","add","sub","console","log","push","setTransaction","getSingle","_read","putSingle","_update","putError","putStatus","updateHandler","oldType","oldAmount","newAmount","newType","deleteSingle","_delete","deleteError","deleteStatus","deleteHandler","deleteAmount","notificationAction","goBack","children","module","exports","httpReducer","responseData","requestFunction","useReducer","httpState","dispatchHttpState","requestData","validateInputFunc","setEnteredValue","isTouched","setIsTouched","length","trim","forwardRef","inputRef","activate","current","focus","useImperativeHandle","control","invalid","htmlFor","placeholder","disabled","usernameValidate","username","passwordValidate","password","fullnameValidate","fullname","emailValidate","email","includes","phoneValidate","phone","phoneTrimmed","filter","header","Buttons","btnGroup","map","btn","handleClick","selectRef","index"],"mappings":"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","file":"static/js/7.719e895a.chunk.js","sourcesContent":["import React, { useState, useRef, useCallback, useEffect } from 'react';\n// REDUX\nimport { useSelector, useDispatch } from 'react-redux';\n// UI\nimport Card from '../../UI/Card/Card';\nimport Button from '../../UI/Button/Button';\nimport Input from '../../UI/Input/Input';\nimport SelectBox from '../../UI/SelectBox/SelectBox';\n// import LoadingSpinner from '../../../../UI/LoadingSpinner/LoadingSpinner';\nimport ButtonGroup from '../../UI/Button/ButtonGroup/Buttons';\n\n\n// CÚSTOM HOOK\nimport useInput from '../../hooks/use-input';\n\n// HELPER\nimport validateHelper from '../../helpers/validateHelper';\nimport formatingHelper from '../../helpers/formatingHelper'; \nimport { isEmpty } from '../../helpers/typeCheckHelper';\n\n// STYLE\nimport classes from '../AdminForm/ModelView/ModelView.module.css';\nimport btnClasses from '../../UI/Button/Button.module.css';\n\n\n\nconst ModelView = (props) => {\n    const dispatch = useDispatch();\n    const { userId } = useSelector(state => state.auth); \n\n    const [transactionId, setTransactionId] = useState('');\n    const [date, setDate] = useState('');\n    const [type, setType] = useState('thu');\n    const [isDelete, setIsDelete] = useState(false);\n\n    const { enteredValue: name, \n            valueIsValid: nameIsValid,\n            hasError: nameHasError, \n            valueChangeHandler: nameChangeHandler, \n            inputBlurHandler: nameInputBlurHanlder,\n            fetchValueHandler: nameFetchHandler,\n            reset: nameReset } = useInput(validateHelper.nameValidate);\n\n    const { enteredValue: amount, \n            valueIsValid: amountIsValid,\n            hasError: amountHasError, \n            valueChangeHandler: amountChangeHandler, \n            inputBlurHandler: amountInputBlurHanlder,\n            fetchValueHandler: amountFetchHandler,\n            reset: amountReset } = useInput(validateHelper.amountValidate);\n    \n    const { enteredValue: description, \n            valueIsValid: descriptionIsValid,\n            // hasError: descriptionHasError, \n            valueChangeHandler: descriptionChangeHandler, \n            inputBlurHandler: descriptionInputBlurHanlder,\n            fetchValueHandler: descriptionFetchHandler,\n            reset: descriptionReset } = useInput((description) => true);\n    \n    let formIsValid = false;\n    if (nameIsValid && amountIsValid && descriptionIsValid) {\n        formIsValid = true; \n    }\n\n    // FETCH DATA\n    const { transaction } = props;\n    useEffect(() => {   \n        const { id: idProp, \n            name: nameProp, \n            amount: amountProp,\n            type: typeProp,\n            date: dateProp,\n            description: descriptionProp, \n            } = transaction;\n\n        setTransactionId(idProp);\n        nameFetchHandler(nameProp); \n        amountFetchHandler(amountProp); \n        descriptionFetchHandler(descriptionProp); \n        setType(typeProp || 'thu');               // need a default value\n        setDate(dateProp || formatingHelper.getCurrentTimestamp());\n    }, [transaction]);\n\n    // NOTIFY\n    const { error, status } = props;\n    useEffect(() => {\n        if (status !== 'completed') {\n            return; \n        }\n\n        if (!error) {\n            props.notify({message: \"Lưu thông tin thành công!\", type: \"success\"}); \n        } else {\n            props.notify({message: error, type: 'danger'});\n        }\n    }, [error, status]);\n\n    /**\n     * USE REF\n     */\n    const nameInputRef = useRef(); \n    const amountInputRef = useRef(); \n \n    /**\n     * Event Handler\n     */\n    const onChangeType = useCallback((event) => {\n        setType(event.target.value);\n    }, []);\n\n    const submitHandler = (event) => {\n        event.preventDefault(); \n        \n        if (!formIsValid) {\n            props.notify({message: \"Vui lòng điền đầy đủ thông tin!\", type: 'danger'});\n            return; \n        }\n\n        /**\n         * Save info \n         */        \n        const data = {\n            name: name, \n            transaction_type: type, \n            amount: parseInt(amount), \n            description: description,\n            user_id: userId,\n        }\n\n        if (!transactionId) {\n            props.onCreateTransaction(data);\n        } else if (!isDelete) {\n            props.onUpdateTransaction(transactionId, data);   \n        } else {\n            props.onDeleteTransaction(transactionId);\n            setIsDelete(false);\n        }\n\n        /**\n         * Reset input \n         */\n        nameReset();\n        amountReset();\n        setType('thu'); \n        descriptionReset();\n    };\n\n    return (\n        <Card className={ `${classes.card} ${props.className}` }>\n            <h2>Thông tin giao dịch</h2>\n            <form onSubmit={ submitHandler }>\n                <div className={`${classes.input} `} >\n                    <Input \n                        id='name' \n                        type='text'\n                        ref={ nameInputRef }\n                        label={ 'Tên giao dịch' }\n                        isValid={ nameIsValid }\n                        hasError={ nameHasError }\n                        value={ name }\n                        onChange={ nameChangeHandler }\n                        onBlur={ nameInputBlurHanlder }\n                        className={ classes['card-input'] }\n                        errorMessage={ \"Vui lòng nhập lại tên giao dịch!\" } \n                        />\n\n                    <Input \n                        id='amount' \n                        type='text'\n                        ref={ amountInputRef }\n                        label={ 'Số tiền' }\n                        isValid={ amountIsValid }\n                        hasError={ amountHasError }\n                        value={ amount }\n                        onChange={ amountChangeHandler }\n                        onBlur={ amountInputBlurHanlder }\n                        className={ classes['card-input'] }\n                        errorMessage={ \"Vui lòng nhập lại số tiền (Lớn hơn 1000 VND)\" } \n                        />\n                </div>\n\n                <div className={`${classes.input} `} >\n                    <SelectBox \n                        id='type' \n                        label={ 'Loại giao dịch' }\n                        valuesList={ [\n                            {textField: 'Thu', valueField: 'thu'},\n                            {textField: 'Chi', valueField: 'chi'}\n                        ] }\n                        value={ type }\n                        onChange={ onChangeType }\n                        className={ classes['card-input'] }\n                    />\n        \n                    <Input \n                        id='description' \n                        type='text'\n                        value={ description }\n                        isValid={ true }\n                        hasError={ false }\n                        label={ 'Mô tả' }\n                        onChange={ descriptionChangeHandler }\n                        onBlur={ descriptionInputBlurHanlder }\n                        className={ classes['card-input'] }\n                        />\n                </div>\n\n                <ButtonGroup \n                    btnList={ [\n                        {\n                            className: btnClasses['button-light'],\n                            onClick: props.onGoBack, \n                            name: 'Quay lại', \n                            isShown: true,\n                        }, \n                        {\n                            className: btnClasses['button-success'], \n                            type: 'submit', \n                            name: 'Lưu thông tin', \n                            isShown: true\n                        },\n                        {\n                            className: btnClasses['button-danger'], \n                            name: 'Xoá thông tin', \n                            type: 'submit',\n                            onClick: () => setIsDelete(true),\n                            isShown: transactionId ? true : false,\n                        }\n                    ] }\n                    className={ classes.action }\n                />\n                \n            </form>\n        </Card>\n\n    );\n}\n\n\n// export default TransactionItemView;\nexport default React.memo(ModelView);","import { Fragment, useEffect, useState } from 'react';\n// REACT ROUTER\nimport { useHistory, useParams } from 'react-router';\n// REDUX\nimport { useDispatch, useSelector } from 'react-redux';\nimport { notificationAction } from '../../stores/notification-slice';\nimport { balanceAction } from '../../stores/balance/balance-slice';\n// CUSTOM HOOK\nimport useHttp from '../../hooks/use-http'; \nimport { getSingle, post, deleteSingle, putSingle } from '../../helpers/apiHelper';\n// COMPONENT\nimport TransactionView from '../../objects/Transactions/ModelView';\n\n\n\nconst Transaction = (props) => {\n    const apiEndpoint = 'transaction';\n    // HOOKS\n    const params = useParams();\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    const { transactionId } = params; \n\n    const balance = useSelector(state => state.balance); \n\n    /**\n     * METHOD: POST \n     */\n    const { sendRequest: _create, error: postError, status: postStatus\n        // error, status, data: transaction \n    } = useHttp(post.bind(null, apiEndpoint));\n\n    const createHandler = async (data) => {\n        await _create(data); \n\n        const { amount, transaction_type } = data;\n\n        if (transaction_type === 'thu') {\n            dispatch(balanceAction.add({amount: amount}));\n        } else if (transaction_type === 'chi') {\n            dispatch(balanceAction.sub({amount: amount}));\n        }\n        console.log(\"BALANCE CHANGED\");\n        \n        history.push('/transactions');\n    }\n\n    /**\n     * METHOD: GET SINGLE\n     */\n     const [transaction, setTransaction] = useState({}); \n\n     const { sendRequest: _read, \n             // error, status, \n             data } = useHttp(getSingle.bind(null, apiEndpoint));\n     \n     useEffect(() => {\n         if (!transactionId) {\n             setTransaction({}); \n             return; \n         } \n         if (!data) {\n             _read(transactionId); \n         } else {\n             setTransaction(data); \n         }        \n     }, [transactionId, _read, data]);\n\n    /**\n     * METHOD: UPDATE \n     */\n     const { sendRequest: _update, error: putError, status: putStatus\n        // , status, data: transaction \n    } = useHttp(putSingle.bind(null, apiEndpoint));\n\n    const updateHandler = async (id, data) => {\n        const response = await _update({...data, id}); \n\n        const { amount, transaction_type: oldType } = transaction;\n        const oldAmount = parseInt(amount)\n        const { amount: newAmount, transaction_type: newType } = data;\n\n        if (newType === 'thu' && oldType === 'thu') {\n            dispatch(balanceAction.add({amount: newAmount - oldAmount}));\n        } \n\n        else if (newType === 'thu' && oldType === 'chi') {\n            dispatch(balanceAction.add({amount: newAmount + oldAmount}));\n        }\n\n        else if (newType === 'chi' && oldType === 'thu') {\n            dispatch(balanceAction.sub({amount: newAmount - oldAmount}));\n        }\n\n        else {\n            dispatch(balanceAction.sub({amount: newAmount + oldAmount}));\n        }\n        \n        console.log(\"BALANCE CHANGED\");\n        \n        history.push('/transactions');\n    }\n\n    /**\n     * METHOD: DELETE \n     */\n    const { sendRequest: _delete, error: deleteError, status: deleteStatus\n        // error, status, data: transaction \n    } = useHttp(deleteSingle.bind(null, apiEndpoint));\n\n    const deleteHandler = async (id) => {\n        await _delete(id); \n\n        const { amount, transaction_type } = transaction;\n        const deleteAmount = parseInt(amount);\n\n        if (transaction_type === 'thu') {\n            dispatch(balanceAction.sub({amount: deleteAmount}));\n        } else if (transaction_type === 'chi') {\n            dispatch(balanceAction.add({amount: deleteAmount}));\n        }\n            console.log(\"BALANCE CHANGED\");\n\n        history.push('/transactions');\n    }\n\n\n    const notify = ({id, message, type}) => {\n        dispatch(notificationAction.notify({\n            message: message, \n            type: type\n        }));\n    }\n\n    const goBackHandler = () => history.goBack(); \n    \n    \n    return (\n        <Fragment>\n            {/* { console.log(\"transaction\", transaction) }, */}\n            <TransactionView \n                transaction={ transaction }\n                error={ postError || putError || deleteError }\n                status={    \n                    (postStatus === 'completed') || \n                    (putStatus === 'completed') || \n                    (deleteStatus === 'completed') \n                        ? \"completed\" : \"pending\" \n                }\n                onCreateTransaction={ createHandler }\n                onUpdateTransaction={ updateHandler }\n                onDeleteTransaction={ deleteHandler }\n                notify={ notify }\n                onGoBack={ goBackHandler }/>\n        </Fragment>\n        \n    );\n}\n\n\nexport default Transaction;","import React from 'react';\n\nimport classes from './Card.module.css';\n\nconst Card = (props) => {\n    return (\n        <div className={ `${classes.card} ${props.className}` }>\n            { props.children }\n        </div>\n    );\n}\n\n\nexport default Card;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__b7d4V\"};","import { useReducer, useCallback } from \"react\";\n\nconst httpReducer = (state, action) => {\n    if (action.type === 'SUCCESS') {\n        return {\n            status: \"completed\", \n            data: action.responseData, \n            error: null, \n        }\n    } else if (action.type === 'FAILED') {\n        return {\n            status: \"completed\", \n            data: null, \n            error: action.errorMessage, \n        }\n    } \n    return {\n        status: 'pending', \n        error: null, \n        data: null\n    }\n}\n\n\nconst useHttp = (requestFunction) => {\n    const [httpState, dispatchHttpState] = useReducer(httpReducer, {\n        status: \"pending\", \n        data: null, \n        error: null,\n    });\n\n    const sendRequest = useCallback(async (requestData) => {\n        try {\n            const responseData = await requestFunction(requestData); \n            dispatchHttpState({ type: 'SUCCESS', responseData: responseData }); \n        } catch (error) {\n            dispatchHttpState({ type: 'FAILED', errorMessage: error.message });\n        }\n    }, []);\n\n    return {\n        ...httpState, \n        sendRequest\n    }\n\n}\n\nexport default useHttp;","import { useState } from 'react';\n\n\nconst useInput = (validateInputFunc) => {\n    const [enteredValue, setEnteredValue] = useState(''); \n    const [isTouched, setIsTouched] = useState(false); \n\n    const valueIsValid = validateInputFunc(enteredValue.length ? enteredValue.trim() : enteredValue);\n    const hasError =  (!valueIsValid && isTouched);\n\n    const valueChangeHandler = (event) => {\n        setEnteredValue(event.target.value); \n    }\n\n    const inputBlurHandler = (event) => {\n        setIsTouched(true); \n    }\n\n    const fetchValueHandler = (value) => {\n        setEnteredValue(value || '');\n    }\n\n    const reset = () => {\n        setEnteredValue(''); \n        setIsTouched(false);\n    }\n\n    return {\n        enteredValue, \n        valueIsValid,\n        hasError, \n        valueChangeHandler, \n        inputBlurHandler,\n        fetchValueHandler,\n        reset\n    }\n}\n\n\nexport default useInput;\n\n","import React, { useRef, useImperativeHandle } from 'react';\n\nimport classes from './Input.module.css';\n\nconst Input = React.forwardRef((props, ref) => {\n    const inputRef = useRef(); \n    \n    // const getInputValue = () => inputRef.current.value; \n\n    const activate = () => inputRef.current.focus(); \n\n    useImperativeHandle(ref, () => {\n        return {\n            focus: activate,\n        }\n    })\n    return (\n        <div className={ `${classes.control} ${ props.className } ${\n            props.hasError ? classes.invalid : ''\n        }` }>\n            <label htmlFor={ props.id }>{ props.label }</label>\n            <input \n                id={ props.id }    \n                type={ props.type }\n                value={ props.value }\n                placeholder={ props.placeholder }\n                onChange={ props.onChange }\n                onBlur={ props.onBlur }\n                ref={ inputRef }\n                disabled={ props.disabled ? true : false}\n            />\n            { props.hasError && <p className={ classes.error }>{ props.errorMessage }</p>}       \n        </div>\n        \n    );\n});\n\n\nexport default Input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"control\":\"Input_control__3fhd9\",\"invalid\":\"Input_invalid__376Oq\",\"error\":\"Input_error__1CLDt\"};","\n\nclass validateHelper {\n    constructor() {\n        return; \n    }\n\n    /** USER */\n    static usernameValidate = (username) => {\n        if (username) {\n            const value = username.trim();\n            return value.length > 5;\n        }\n        return false;\n    }\n    \n    static passwordValidate = (password) => {\n        if (password) {\n            return password.trim().length > 5;\n        }\n        return false;\n    }\n    \n    static fullnameValidate = (fullname) => {\n        if (fullname) {\n            return fullname.trim().length > 8;\n        }\n        return false;\n    }\n\n    static emailValidate = (email) => {\n        if (email) {\n            return email.trim().length > 10 && email.includes('@');\n        }\n        return false;\n    }\n    \n    static phoneValidate = (phone) => {\n        if (phone) {\n            const phoneTrimmed = phone.trim();\n            const phoneHeader = ['032', '033', '034', '035', '036', '037', '038', '039', '092']; \n            const phoneIncludeValidHeader = phoneHeader.filter(header => phoneTrimmed.includes(header)); \n        \n            return phoneIncludeValidHeader.length > 0 && phone.length === 10;\n        }\n\n        return false;\n        \n    }\n\n    /** TRANSACTION */\n    static nameValidate = (name) => {\n        if (name) {\n            return name.trim().length > 0;\n        }\n        return false;\n    }\n\n    static amountValidate = (amount) => {\n        if (amount) {\n            const value = parseInt(amount);\n\n            if (!value) {\n                return false;\n            }\n\n            return value > 1000 && !(value % 1000); \n        }\n        return false;\n    }\n}\n\n\n\nexport default validateHelper;","import React from 'react';\nimport ReactDOM from 'react-dom'; \nimport { Link } from 'react-router-dom';\n\nimport Button from '../Button';\n\nimport classes from './Buttons.module.css';\n\nconst Buttons = (props) => {\n    /**\n     * props: \n     *  - Each button = {} => props = [{}, {}, {}]\n     *  - {\n     *      name, \n     *      onClick, \n     *      type, \n     *      className, \n     *      isShown\n     *  }\n     */\n    return (\n        <div className={ `${classes.btnGroup} ${props.className}` }>\n            { props.btnList.map(btn => \n                (btn.isShown) && \n                    <Button\n                        key={ btn.name }\n                        type={ btn.type || 'button'}\n                        className={ btn.className }\n                        handleClick={ btn.onClick }>\n                            { btn.name }\n                    </Button>\n            ) }\n        </div>\n\n    );\n}\n\n\nexport default React.memo(Buttons);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Buttons_button__2ziV1\",\"portalBtn\":\"Buttons_portalBtn___Z6CZ\"};","import React, { useRef } from 'react';\n\nimport classes from './SelectBox.module.css';\n\nconst SelectBox = (props) => {\n    const selectRef = useRef(); \n\n    const getSelectValue = () => selectRef.current.value();\n\n    return (\n        <div className={ `${classes.control} ${props.className}` }>\n            <label htmlFor={ props.id }>{ props.label }</label>\n            <select\n                id='type'\n                value={ props.value }\n                ref={ selectRef }\n                onChange={ props.onChange } \n                onBlur={ props.onBlur }\n            >\n                { props.valuesList.map((value, index) => (\n                    <option \n                        key={ value.valueField }\n                        value={ value.valueField }>{ value.textField }</option>\n                )) }\n\n            </select>\n        </div>\n\n    );\n}\n\nexport default SelectBox;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"control\":\"SelectBox_control__2UFPm\",\"invalid\":\"SelectBox_invalid__1naWs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"ModelView_card__Y-Q85\",\"card-input\":\"ModelView_card-input__3cZPU\",\"input\":\"ModelView_input__2XBfK\",\"action\":\"ModelView_action__22eXL\"};"],"sourceRoot":""}